<?php

use Drupal\block\Entity\Block;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Markup;
use Drupal\Core\Url;
use Drupal\nodeshop\NodeShop;
use Drupal\taxonomy\Entity\Term;

function palm_theme() {
  return [
        'palm_buy_button' => [
            'template' => 'navigation/palm_buy_button',
            'variables' => [
                'product_node_id' => '',
                'destination' => '',
                'product_price' => '',
                'label' => '',
                'title' => '',
            ],
        ],
        'palm_download_button' => [
            'template' => 'navigation/palm_download_button',
            'variables' => [
                'download_url' => '',
                'label' => '',
                'title' => '',
            ],
        ],
        'palm_social_links' => [
            'template' => 'navigation/palm_social_links',
            'variables' => [
                'link_facebook' => '',
                'link_twitter' => '',
                'link_mail' => '',
                'link_download' => '',
                'node_url' => '',
                'node_title' => '',
            ]
        ],
        'palm_edition' => [
            'template' => 'navigation/palm_edition',
            'variables' => [
                'edition' => [],
            ]
        ],
        'palm_heading_pagecategory' => [
            'template' => 'content/palm_heading_pagecategory',
            'variables' => [
                'category_prefix' => '',
                'headline' => '',
                'url' => '',
                'link_title' => '',
            ]
        ],
      ];
}

/**
 * Implements hook template_prepocess_page_title
 *
 * We use this to add a class to the page title, depending on the type of page
 * that is displayed. Currently we set:
 *
 *  - heading--article on all nodes
 *  - heading--pagecategory on all cart routes and for users
 *
 * @param array $variables The Drupal render array that goes into the template
 *
 * @return void
 */
function palm_preprocess_page_title(&$variables) {

    $custom_headline_class = 'heading--pagecategory';

    // Title overrides for nodes goes here:
    if ($node = \Drupal::request()->attributes->get('node')) {
        if ('ausgabe' == $node->bundle()) {
            $variables['title_prefix'] = t('Edition');
            $variables['title_attributes']['class'][] = $custom_headline_class;
        } elseif (false === strpos(\Drupal::routeMatch()->getRouteName(), 'Bonus')) {
            $variables['title_attributes']['class'][] = 'heading--article';
        }
    }
    // Title overrides for taxonomies or vocabularies goes here:
    if (\Drupal::routeMatch()->getRouteName() == 'entity.taxonomy_term.canonical') {
        $term = Term::load(\Drupal::routeMatch()->getRawParameter('taxonomy_term'));
        if ('themen' == $term->bundle()) {
            $variables['title_prefix'] = t('Topic');
            $variables['title_attributes']['class'][] = $custom_headline_class;
        }
        if ('autoren' == $term->bundle()) {
            $variables['title_prefix'] = t('Authors');
            $variables['title_prefix_link'] = Url::fromRoute(
                            'view.blaetter_autoren.page_1',
                            [
                              'sort_character' => 'a'
                            ]
                        );
            $variables['title_prefix_link_title'] = t('back to all editors');
            $variables['title_attributes']['class'][] = $custom_headline_class;
        }
    }

    if (false !== strpos(\Drupal::routeMatch()->getRouteName(), 'view.blaetter_themen.page_1')) {
        $variables['title_prefix'] = 'Blätter';
    }
    if (false !== strpos(\Drupal::routeMatch()->getRouteName(), 'view.blaetter_blog.page_1')) {
        $variables['title_prefix'] = 'Blätter';
    }
    if (false !== strpos(\Drupal::routeMatch()->getRouteName(), 'view.blaetter_ausgabe.page_1')) {
        $variables['title_prefix'] = t('editions');
    }
    if (false !== strpos(\Drupal::routeMatch()->getRouteName(), 'view.blaetter_dossiers.page_1')) {
        $variables['title_prefix'] = 'Dossier';
        $variables['title'] = t('overview');
    }
    if (false !== strpos(\Drupal::routeMatch()->getRouteName(), 'view.blaetter_autoren.page_1')) {
        $variables['title_prefix'] = 'Blätter';
    }
    if (false !== strpos(\Drupal::routeMatch()->getRouteName(), 'view.blaetter_autoren.page_2')) {
      $variables['title_prefix'] = 'Blätter';
    }
    if (false !== strpos(\Drupal::routeMatch()->getRouteName(), 'view.blaetter_autoren.page_3')) {
      $variables['title_prefix'] = 'Blätter';
    }

    // add special prefixes for special routes
    $prefix_routes_user = [
        'entity.user.canonical',
        'entity.user.edit_form',
    ];
    if (in_array(\Drupal::request()->get('_route'), $prefix_routes_user)) {
        $variables['title_prefix'] = t('User account');
    }

    // We define routes, where we need a special class for the title
    $routes = [
        //'entity.taxonomy_term.canonical',
        'contact.site_page',
        'entity.user.cancel_form',
        'entity.user.canonical',
        'entity.user.contact_form',
        'entity.user.edit_form',
        'nodeshop.addBonus',
        'nodeshop.changeBonus',
        'nodeshop.finishedOrder',
        'nodeshop.processOrder',
        'nodeshop.removeBonus',
        'nodeshop.showCart',
        'search.help_suche',
        'search.view',
        'search.view_node_search',
        'search.view_suche',
        'user.login',
        'user.page',
        'user.pass',
        'user.register',
        'user.reset.form',
        'user.reset.login',
        'user.reset',
        'view.blaetter_ausgabe.page_1',
        'view.blaetter_autoren.page_1',
        'view.blaetter_autoren.page_2',
        'view.blaetter_autoren.page_3',
        'view.blaetter_blog.page_1',
        'view.blaetter_dossiers.page_1',
        'view.blaetter_themen.page_1',
        'view.blaetter_zurueckgeblaettert.page_1',
        'view.nodeshop_user_orders.page_1',
        'view.nodeshop_user_orders.page_2',
    ];
    if (in_array(\Drupal::request()->get('_route'), $routes)) {
        $variables['title_attributes']['class'][] = $custom_headline_class;
    }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function palm_preprocess_breadcrumb(&$variables) {
    $request = \Drupal::request();

    // add link to author page on taxonomy term pages from the author vocabulary
    if ('entity.taxonomy_term.canonical' == $request->get('_route')) {
        $term = Term::load(\Drupal::routeMatch()->getRawParameter('taxonomy_term'));
        if ('autoren' == $term->bundle()) {
            $variables['#cache']['contexts'][] = 'url';
            $author_index = [
                ['text' => t('Authors'), 'url' => '/autoren']
            ];
            array_splice($variables['breadcrumb'], 1, 0, $author_index);
        }
    }

    // Change text for last breadcrumb part for user edit form
    if ('entity.user.edit_form' == \Drupal::request()->get('_route')) {
        $variables['breadcrumb'][2]['text'] = t('Edit user account');
    }
}

/**
 * Implements hook template_preprocess_field__node__body
 *
 * We use this to add an extra class to the first paragraph of the body field as we want to have an initial there for
 * every configured node type.
 * In order to do so, we need to recreate the complete markup for the body field.
 * We only want to do that on the full node view_mode
 *
 * @param array $variables The Drupal render array that goes into the template
 *
 * @return void
 */
function palm_preprocess_field__node__body(&$variables)
{
  // get current user
  $current_user = \Drupal\user\Entity\User::load($variables['user']->id());
  // get view mode (e.g. full or teaser)
  $view_mode = $variables['element']['#view_mode'];
  // get the node object
  $node = $variables['element']['#object'];

  if ('full' == $view_mode) {
    // prepare replacement body
    $replaced_body = $variables['items'][0]['content']['#text'];
    // precreated render service
    $renderer = \Drupal::service('renderer');
    // get node types, that will get an initiale
    $palm_initial_nodetypes = theme_get_setting('palm_initial_nodetypes');
    if (!empty($palm_initial_nodetypes) && in_array($variables['element']['#bundle'], $palm_initial_nodetypes)) {
      $replaced_body = preg_replace(
        '/<p>/i',
        '<p class="initiale">',
        $variables['items'][0]['content']['#text'],
        1
      );
    }

    // load ausgabe preview to node views of type story that:
    //  - are free to view
    //  - are viewed by an anonymous user
    if ('story' === $variables['element']['#bundle']
      && NodeShop::grantUserAccess($node, $current_user)
      && isset($node)
      && $current_user->isAnonymous()
    ) {
      $book = \Drupal::entityTypeManager()->getStorage('node')->load($node->book['bid']);
      if ($book && 'ausgabe' == $book->getType()) {
        $text_count_summary = t(
          'This article is part of the issue @issue. Click here to read the full issue.',
          [
            '@issue' => $book->getTitle()
          ]
        );
        $edition = [
          '#weight' => 3, // set it directly prior to links, which have #weight => 5
          '#theme' => 'palm_edition',
          '#edition' => [
              'link' => $book->toUrl(),
              'link_title' => t('Click here to read the full issue.'),
              'image' => $book->field_primary_picture->view('full'),
              'text_count_summary' => $text_count_summary,
          ]
        ];
        $markup = $renderer->render($edition);

        $replaced_body = preg_replace(
          '/(?s)((?:<p.*?>.*?<\/p>\s*){3})/',
          '$1' . $markup,
          $replaced_body,
          1
        );
      }
    }

    // check for blocks that needs to be inserted into the node body
    if (false !== strpos($replaced_body, '[block:')) {
      // first, check for all blocks, that needs to be inserted:
      \preg_match_all('/\[block:([^\]]+)\]/i', $replaced_body, $matches, \PREG_SET_ORDER);

      foreach ($matches as $match) {
        //$block = \Drupal\block_content\Entity\BlockContent::load($match[2]);
        $block = \Drupal\block\Entity\Block::load($match[1]);

        if ($block instanceof \Drupal\Core\Entity\EntityInterface) {
          $markup = $renderer->render(\Drupal::entityTypeManager()->getViewBuilder('block')->view($block));
          $replaced_body = str_replace(
            $match[0],
            $markup,
            $replaced_body
          );
        }
      }
    }

    // check for media elements that needs to be inserted into the node body
    if (false !== strpos($replaced_body, '[media:')) {
      // first, check for all blocks, that needs to be inserted:
      \preg_match_all('/\[media:([^\]]+)\]/i', $replaced_body, $matches, \PREG_SET_ORDER);

      foreach ($matches as $match) {
        //$block = \Drupal\block_content\Entity\BlockContent::load($match[2]);
        $media = \Drupal\media\Entity\Media::load($match[1]);

        if ($media instanceof \Drupal\Core\Entity\EntityInterface) {
          $markup = $renderer->render(\Drupal::entityTypeManager()->getViewBuilder('media')->view($media));
          $replaced_body = str_replace(
            $match[0],
            $markup,
            $replaced_body
          );
        }
      }
    }

    // replace the body with all replacements that have been made
    $variables['items'][0]['content'] = Markup::create($replaced_body);
  }
}

/**
 * Implmentation of hook_preprocess_menu
 * We use it to make the current path_alias available in the menu theme so we can
 * identify menu structures that needs to be opened
 *
 * @param array $variables
 * @return void
 */
function palm_preprocess_menu(&$variables)
{
    if ('navigation' == $variables['menu_name']) {
        $variables['current_path'] = \Drupal::request()->getRequestUri();
    }
}

/**
 * Implementation of hook_theme_suggestions_block_alter
 *
 * We use this to implement template suggestions based on the region of the page.
 *
 * @see https://www.drupal.org/node/2011434
 *
 * @param array $suggestions The referenced suggestions array
 * @param array $variables   The variables that are coming along with the suggestsions
 */
function palm_theme_suggestions_block_alter(array &$suggestions, array $variables)
{
  if (!empty($variables['elements']['#id'])) {
    $block = Block::load($variables['elements']['#id']);
    $suggestions[] = 'block__' . $block->getRegion();
    $suggestions[] = 'block__' . $block->getRegion() . '__' . $variables['elements']['#id'];
  }
  return $suggestions;
}

/**
 * Implementation of hook_theme_suggestions_field_alter
 *
 * We use this to implement template suggestions based on the display mode of the field.
 *
 * @see https://www.drupal.org/project/zurb_foundation/issues/2962578
 *
 * @param array $suggestions The referenced suggestions array
 * @param array $variables   The variables that are coming along with the suggestsions
 */
function palm_theme_suggestions_field_alter(array &$suggestions, array $variables) {
  $suggestion = 'field__' .
    $variables['element']['#entity_type'] . '__' .
    $variables['element']['#field_name'] . '__' .
    $variables['element']['#view_mode'];
  $suggestions[] = $suggestion;
  return $suggestions;
}

function palm_theme_suggestions_taxonomy_term_alter(&$suggestions, $vars, $hook) {
  $suggestions[] = 'taxonomy_term__' . $vars['elements']['#view_mode'];
}

/**
 * Implememntation of hook_preprocess_page
 *
 * @param array $variables
 * @return void
 */
function palm_preprocess_page(&$variables) {
    // get route name of current request
    $route_name = \Drupal::routeMatch()->getRouteName();
    // check for error pages
    if ('system.401' == $route_name || 'system.403' == $route_name || 'system.404' == $route_name) {
        $error_code = str_replace('system.', '', $route_name);
        $variables['page']['hero']['category_title'] = [
          '#theme' => 'palm_heading_pagecategory',
          '#headline' => t('Error @code', ['@code' => $error_code]),
          '#weight' => -11,
        ];
        // force Drupal to resort the blocks in the region
        $variables['page']['hero']['#sorted'] = false;
    }
    // Add title prefix for all shop pages
    if (false !== strpos(\Drupal::routeMatch()->getRouteName(), 'view.blaetter_shop')) {
        $variables['page']['hero']['category_title'] = [
          '#theme' => 'palm_heading_pagecategory',
          '#category_prefix' => 'Blätter',
          '#headline' => 'Kiosk',
          '#weight' => -11,
        ];
        // force Drupal to resort the blocks in the region
        $variables['page']['hero']['#sorted'] = false;
    }
    if ($node = \Drupal::request()->attributes->get('node')) {
        if ('story' == $node->getType()) {
            $issue = _palm_get_issue($node);
            if (!empty($issue['year']) && !empty($issue['edition'])) {
                $edition = $issue['edition'] . ' ' . $issue['year'];
            }
            $variables['page']['hero']['category_title'] = [
                '#theme' => 'palm_heading_pagecategory',
                '#category_prefix' => t('Edition'),
                '#headline' => $edition,
                '#weight' => -11,
            ];
            $variables['page']['hero']['#sorted'] = false;
        }
        // provide headings if in full node view
        if ('dossier' == $node->getType()) {
            $dossier = '';
            if ($node->hasField('field_dossier')) {
                $dossier = $node->field_dossier->entity->getName();
                $variables['page']['hero']['category_title'] = [
                    '#theme' => 'palm_heading_pagecategory',
                    '#category_prefix' => t('Dossier'),
                    '#headline' => $dossier,
                    '#weight' => -11,
                ];
                // force Drupal to resort the blocks in the region
                $variables['page']['hero']['#sorted'] = false;
            }
        }
        if ('product' == $node->getType()
        && $route_name != 'nodeshop.addBonus'
        && $route_name != 'nodeshop.changeBonus'
        && $route_name != 'nodeshop.removeBonus'
        ) {
            $rubric = '';
            if ($node->hasField('field_rubrik')) {
                $rubric = $node->field_rubrik->entity->getName();
            }
            $variables['page']['hero']['category_title'] = [
                '#theme' => 'palm_heading_pagecategory',
                '#category_prefix' => t('Blätter Kiosk'),
                '#headline' => $rubric,
                '#weight' => -11,
            ];
            // force Drupal to resort the blocks in the region
            $variables['page']['hero']['#sorted'] = false;
        }
        // default page category on all page type nodes
        if ('page' == $node->getType()) {
            $page_category_prefix = t('About');
            $page_category_title = t('the »Blätter«');
            if ($node->hasField('field_page_category_prefix')
                && !empty($node->get('field_page_category_prefix')->value)) {
                $page_category_prefix = $node->get('field_page_category_prefix')->value;
            }
            if ($node->hasField('field_page_category_title')
                && !empty($node->get('field_page_category_title')->value)) {
                $page_category_title = $node->get('field_page_category_title')->value;
            }
            $variables['page']['hero']['category_title'] = [
                '#theme' => 'palm_heading_pagecategory',
                '#category_prefix' => $page_category_prefix,
                '#headline' => $page_category_title,
                '#weight' => -11,
            ];
            // force Drupal to resort the blocks in the region
            $variables['page']['hero']['#sorted'] = false;
        }
        // default page category on all aktuell type nodes
        if ('aktuell' == $node->getType()) {
            $variables['page']['hero']['category_title'] = [
                '#theme' => 'palm_heading_pagecategory',
                '#headline' => 'Außer der Reihe',
                '#weight' => -11,
            ];
            // force Drupal to resort the blocks in the region
            $variables['page']['hero']['#sorted'] = false;
        }
        // default page category on all zurückgeblaettert type nodes
        if ('zurueckgeblaettert' == $node->getType()) {
            $variables['page']['hero']['category_title'] = [
                '#theme' => 'palm_heading_pagecategory',
                '#headline' => 'Zurückgeblättert',
                '#weight' => -11,
            ];
            // force Drupal to resort the blocks in the region
            $variables['page']['hero']['#sorted'] = false;
        }
        // default page category on all document type nodes
        if ('document' == $node->getType()) {
            $variables['page']['hero']['category_title'] = [
                '#theme' => 'palm_heading_pagecategory',
                '#headline' => 'Dokumente',
                '#weight' => -11,
            ];
            // force Drupal to resort the blocks in the region
            $variables['page']['hero']['#sorted'] = false;
        }
        // default page category on all eurozine type nodes
        if ('eurozine' == $node->getType()) {
            $variables['page']['hero']['category_title'] = [
                '#theme' => 'palm_heading_pagecategory',
                '#headline' => 'Eurozine',
                '#weight' => -11,
            ];
            // force Drupal to resort the blocks in the region
            $variables['page']['hero']['#sorted'] = false;
        }
        // add page category on all blog type nodes
        if ('blog' == $node->getType()) {
            $variables['page']['hero']['category_title'] = [
                '#theme' => 'palm_heading_pagecategory',
                '#category_prefix' => 'Blätter',
                '#headline' => t('Blog'),
                '#weight' => -11,
            ];
            // force Drupal to resort the blocks in the region
            $variables['page']['hero']['#sorted'] = false;
        }
        // add page category on all blog type nodes
        if ('praemie' == $node->getType()) {
          $variables['page']['hero']['category_title'] = [
              '#theme' => 'palm_heading_pagecategory',
              '#category_prefix' => 'Blätter',
              '#headline' => t('bonus'),
              '#weight' => -11,
          ];
          // force Drupal to resort the blocks in the region
          $variables['page']['hero']['#sorted'] = false;
      }
    }

    // add footer link node id and title if exists
    $footer_link_nid = theme_get_setting('palm_footer_link');
    if (!empty($footer_link_nid)) {
        $variables['page']['footer_link'] = $footer_link_nid;
    }
    $footer_link_title = theme_get_setting('palm_footer_link_title');
    if (!empty($footer_link_title)) {
        $variables['page']['footer_link_title'] = $footer_link_title;
    }
}

/**
 * Implementation of template_preprocess_node
 *
 * @param array $variables The reference to the variable array
 * @return void
 */
function palm_preprocess_node(&$variables)
{
    // get current user
    $current_user = \Drupal\user\Entity\User::load($variables['user']->id());
    // get view mode (e.g. full or teaser)
    $view_mode = $variables['elements']['#view_mode'];
    // get the renderer
    $renderer = \Drupal::service('renderer');

    // // add dossier articles to the dossier teaser
    // if ('teaser_dossier' == $view_mode) {
    //     $variables['dossier_articles'] = [
    //         '#type' => 'view',
    //         '#name' => 'blaetter_dossiers',
    //         '#display_id' => 'block_1',
    //         '#arguments' => [
    //             $variables['node']->field_dossier->target_id,
    //         ],
    //     ];
    // }

    // add edition preview and purchase buttons to stories that are not available to the end user
    if ('full' == $view_mode
        && isset($variables['node'])
        && 'story' == $variables['node']->getType()
        && !NodeShop::grantUserAccess($variables['node'], $current_user)
    ) {
        if (isset($variables['node']->book) && !empty($variables['node']->book['bid'])) {
            $book = \Drupal::entityTypeManager()->getStorage('node')->load($variables['node']->book['bid']);
            if ($book && 'ausgabe' == $book->getType()) {
                // calculate length of snippet if original body is set
                $text_count_summary = '';
                $original_body_length = strlen($variables['node']->get('body')->value);
                $teaser_body_length = strlen(
                    nodeshop_trim_text(
                        $variables['node']->get('body')->value, 1500, false
                    )
                );

                $teaser_body_percentage = round($teaser_body_length * 100 / $original_body_length);

                $text_count_summary = t(
                    'You\'ve read @countlow% of the text, to read the remaining @counthigh%, you might want to: ',
                    [
                        '@countlow' => $teaser_body_percentage,
                        '@counthigh'=> (100 - $teaser_body_percentage)
                    ]
                );
                $edition = [
                    '#weight' => 3, // set it directly prior to links, which have #weight => 5
                    '#theme' => 'palm_edition',
                    '#edition' => [
                        'image' => $book->field_primary_picture->view('full'),
                        'text_count_summary' => $text_count_summary,
                        'buttons' => [
                            'buy_article' => [
                                '#theme' => 'palm_buy_button',
                                '#product_node_id' => $variables['node']->id(),
                                '#destination' => \Drupal::service('path.current')->getPath(),
                                '#product_price' => NodeShop::getPrice($variables['node']),
                                '#label' => t('Buy article'),
                                '#title' => t('Puts @title (print) into the cart.', ['@title' => $variables['node']->getTitle()]),
                            ],
                            'buy_online' => [
                                '#theme' => 'palm_buy_button',
                                '#product_node_id' => $book->id(),
                                '#destination' => \Drupal::service('path.current')->getPath(),
                                '#product_price' => NodeShop::getPrice($book),
                                '#label' => t('Buy online issue'),
                                '#title' => t('Puts @title (online) into the cart.', ['@title' => $book->getTitle()]),
                            ]
                        ]
                    ]
                ];
                if ($book->hasField('field_ip') && !empty($book->get('field_ip')->value)) {
                    $print_issue = \Drupal::entityTypeManager()->getStorage('node')->load(
                        $book->get('field_ip')->value
                    );
                    if ($print_issue) {
                        $edition['#edition']['buttons']['buy_print'] = [
                            '#theme' => 'palm_buy_button',
                            '#product_node_id' => $print_issue->id(),
                            '#destination' => \Drupal::service('path.current')->getPath(),
                            '#product_price' => NodeShop::getPrice($print_issue),
                            '#label' => t('Buy print issue'),
                            '#title' => t('Puts @title (print) into the cart.', ['@title' => $print_issue->getTitle()]),
                        ];
                    }
                }
                if ($current_user->isAnonymous()) {
                    $edition['#edition']['buttons']['login'] = [
                        '#theme' => 'link',
                        '#title' => t('login to read full article'),
                        '#type' => 'link',
                        '#url' => Url::fromRoute(
                            'user.login',
                            [],
                            [
                                'query' => [
                                    'destination' => \Drupal::service('path.current')->getPath()
                                ]
                            ]
                        ),
                        '#attributes' => [
                            'rel'   => 'nofollow',
                            'class' => ['button', 'button--reversed']
                        ]
                    ];
                    // $edition['#edition']['buttons']['register'] = [
                    //     '#theme' => 'link',
                    //     '#title' => t('register'),
                    //     '#type' => 'link',
                    //     '#url' => Url::fromRoute(
                    //         'user.register',
                    //         [],
                    //         [
                    //             'query' => [
                    //                 'destination' => \Drupal::service('path.current')->getPath()
                    //             ]
                    //         ]
                    //     ),
                    //     '#attributes' => [
                    //         'rel'   => 'nofollow',
                    //         'class' => ['button', 'button--reversed'],
                    //     ]
                    // ];
                }
                $variables['content']['edition'] = $edition;
                unset($variables['content']['field_themen']);
                unset($variables['content']['field_placeholder_issue']);
                unset($variables['content']['links']);
            }
        }
    }

    // add social block for all full node views
    if ('full' == $view_mode && isset($variables['node'])) {
        $node_url = $variables['node']->toUrl()->setAbsolute()->toString();
        $node_title = $variables['node']->getTitle();

        $node_teaser = '';
        if (!empty($variables['node']->body->view('teaser'))) {
          // just get the plain teaser text for the mail, no html needed.
          $node_teaser = $variables['node']->body->view('teaser');
        }

        $variables['social'] = [
            '#theme' => 'palm_social_links',
            '#link_facebook' => true, // is set from node_title and node_url in the template
            '#link_twitter' => t('Read on @blaetter: @title @url', ['@title' => $node_title, '@url' => $node_url]),
            '#link_mail' => 'mailto:?subject=' . t(
                'Read @blaetter: @title',
                [
                    '@title' => $node_title
                ]
            ) . '&body=' . t(
                'Hello,%0D%0A%0D%0AI found this interesting article on the website www.blaetter.de:%0D%0A%0D%0A@title%0D%0A%0D%0A@teaser%0D%0A%0D%0A@link%0D%0A',
                [
                    '@title' => $node_title,
                    '@teaser' => strip_tags($renderer->render($node_teaser)),
                    '@link' => $node_url,
                ]
            ),
            '#node_url' => $node_url,
            '#node_title' => $node_title,
        ];

        // set download links only for nodes of type story. There might be additional
        // node types configured via nodeshop, but there is currently no way to access
        // this check from this point.
        if (NodeShop::grantUserAccess($variables['node'], $current_user) && 'story' == $variables['node']->bundle()) {
            try {
                \Drupal::service('router.route_provider')->getRouteByName(
                    'nodeshop.product_features.product_feature_access_to_attachment.download'
                );
                $variables['social']['#link_download'] = Url::fromRoute(
                    'nodeshop.product_features.product_feature_access_to_attachment.download',
                    [
                        'node' => $variables['node']->id()
                    ]
                );
            } catch (\Exception $e) {
                // nothing to do here, just catch exception...
            }
        }
    }

    if (isset($variables['node']) && 'ausgabe' == $variables['node']->bundle()) {
        // unset download link in the social menu here because we might set it ourselves...
        if (isset($variables['social']) && isset($variables['social']['#link_download'])) {
            unset($variables['social']['#link_download']);
        }

        // add the articles for an edition (aka ausgabe) as a block.
        $variables['edition_articles'] = [
            '#type' => 'view',
            '#name' => 'blaetter_ausgabe',
            '#display_id' => 'block_2',
            '#arguments' => [
                $variables['node']->id(),
            ],
        ];
        // prepare buttons to buy print and digital issues or download them if already bought:
        if ($variables['node']->hasField('field_ip') && !empty($variables['node']->get('field_ip')->value)) {
            $print_issue = \Drupal::entityTypeManager()->getStorage('node')->load(
                $variables['node']->get('field_ip')->value
            );
            if ($print_issue) {
                $variables['button_buy_print'] = [
                    '#theme' => 'palm_buy_button',
                    '#product_node_id' => $print_issue->id(),
                    '#destination' => \Drupal::service('path.current')->getPath(),
                    '#product_price' => NodeShop::getPrice($print_issue),
                    '#label' => t('Buy print issue'),
                    '#title' => t('Puts @title (print) into the cart.', ['@title' => $print_issue->getTitle()]),
                ];
            }
        }
        if (!NodeShop::isUserNode($variables['node'], $current_user) && !$current_user->hasRole('onlineabonnent')) {
            // only display this button if the user not already bought this online issue
            $variables['button_buy_online'] = [
                '#theme' => 'palm_buy_button',
                '#product_node_id' => $variables['node']->id(),
                '#destination' => \Drupal::service('path.current')->getPath(),
                '#product_price' => NodeShop::getPrice($variables['node']),
                '#label' => t('Buy online issue'),
                '#title' => t('Puts @title (online) into the cart.', ['@title' => $variables['node']->getTitle()]),
            ];
        } else {
            // only display this button if the user not already bought this online issue
            $variables['button_download_pdf'] = [
                '#theme' => 'palm_download_button',
                '#download_url' => Url::fromRoute(
                    'nodeshop.product_features.product_feature_access_to_attachment.download',
                    [
                        'node' => $variables['node']->id()
                    ]
                ),
                '#label' => t('Download digital issue'),
                '#title' => t('Download @title as pdf file.', ['@title' => $variables['node']->getTitle()]),
            ];
            // Downlaod of epub and mobi only for nodes newer than 25756
            if (25756 <= $variables['node']->id()) {
                $variables['button_download_epub'] = [
                    '#theme' => 'palm_download_button',
                    '#download_url' => Url::fromRoute(
                        'blaetter_export_epub.epub.download',
                        [
                            'node' => $variables['node']->id()
                        ]
                    ),
                    '#label' => t('Download ePub for eReader'),
                    '#title' => t('Download @title as ePub file.', ['@title' => $variables['node']->getTitle()]),
                ];
                $variables['button_download_mobi'] = [
                    '#theme' => 'palm_download_button',
                    '#download_url' => Url::fromRoute(
                        'blaetter_export_epub.mobi.download',
                        [
                            'node' => $variables['node']->id()
                        ]
                    ),
                    '#label' => t('Download mobi for Kindle'),
                    '#title' => t('Download @title as mobi file.', ['@title' => $variables['node']->getTitle()]),
                ];
            }
        }

        // This is made to add an extra to the node title if a node from type
        // ausgabe is put into the cart.
        // The following way seems a bit dirty, but it's the only working way I
        // could found.
        if ('cart_item_node' == $view_mode) {
            if ('ausgabe' == $variables['node']->bundle()) {
                $variables['label'][0]['#context']['value'] = $variables['label'][0]['#context']['value'] .
                ' (' . t('digital issue') . ')';
            }
        }
    }
}

function palm_preprocess_views_view(&$variables) {
    //kint($variables);
}

function palm_preprocess_links(&$variables) {

  if (isset($variables['links']['node-readmore'])) {
    $variables['links']['node-readmore']['link']['#options']['attributes']['class'][] = 'button';
    $variables['links']['node-readmore']['link']['#options']['attributes']['class'][] = 'button--reversed';
  }

}

/**
 * Implementation of hook_form_alter
 *
 * @param array $form The drupal form array as a reference
 * @param FormStateInterface $form_state
 * @param string $form_id The Drupal form id
 * @return void
 */
function palm_form_alter(&$form, FormStateInterface $form_state, $form_id) {
    if ('nodeshop_order_address_form' == $form_id) {
        // kint($form['personal_information']);
        $form['personal_information']['#attributes']['class'][] = 'grid';
        $form['personal_information']['customer_title']['#wrapper_attributes']['class'][] = 'grid__item';
        $form['personal_information']['customer_title']['#wrapper_attributes']['class'][] = 'two-thirds';
        $form['personal_information']['customer_first_name']['#wrapper_attributes']['class'][] = 'grid__item';
        $form['personal_information']['customer_first_name']['#wrapper_attributes']['class'][] = 'one-half';
        $form['personal_information']['customer_last_name']['#wrapper_attributes']['class'][] = 'grid__item';
        $form['personal_information']['customer_last_name']['#wrapper_attributes']['class'][] = 'one-half';
        $form['personal_information']['customer_email']['#wrapper_attributes']['class'][] = 'grid__item';
        $form['personal_information']['password']['#wrapper_attributes']['class'][] = 'grid__item';
        $form['personal_information']['customer_phone']['#wrapper_attributes']['class'][] = 'grid__item';
        $form['customer_address_information']['#attributes']['class'][] = 'grid';
        $form['customer_address_information']['customer_street']['#wrapper_attributes']['class'][] = 'grid__item';
        $form['customer_address_information']['customer_street_addon']['#wrapper_attributes']['class'][] = 'grid__item';
        $form['customer_address_information']['customer_postal_code']['#wrapper_attributes']['class'][] = 'grid__item';
        $form['customer_address_information']['customer_postal_code']['#wrapper_attributes']['class'][] = 'one-half';
        $form['customer_address_information']['customer_city']['#wrapper_attributes']['class'][] = 'grid__item';
        $form['customer_address_information']['customer_city']['#wrapper_attributes']['class'][] = 'one-half';
        $form['customer_address_information']['customer_country']['#wrapper_attributes']['class'][] = 'grid__item';
        $form['deliver_information']['#attributes']['class'][] = 'grid';
        $form['deliver_information']['delivery_title']['#wrapper_attributes']['class'][] = 'grid__item';
        $form['deliver_information']['delivery_title']['#wrapper_attributes']['class'][] = 'two-thirds';
        $form['deliver_information']['delivery_first_name']['#wrapper_attributes']['class'][] = 'grid__item';
        $form['deliver_information']['delivery_first_name']['#wrapper_attributes']['class'][] = 'one-half';
        $form['deliver_information']['delivery_last_name']['#wrapper_attributes']['class'][] = 'grid__item';
        $form['deliver_information']['delivery_last_name']['#wrapper_attributes']['class'][] = 'one-half';
        $form['deliver_information']['delivery_street']['#wrapper_attributes']['class'][] = 'grid__item';
        $form['deliver_information']['delivery_street_addon']['#wrapper_attributes']['class'][] = 'grid__item';
        $form['deliver_information']['delivery_postal_code']['#wrapper_attributes']['class'][] = 'grid__item';
        $form['deliver_information']['delivery_postal_code']['#wrapper_attributes']['class'][] = 'one-half';
        $form['deliver_information']['delivery_city']['#wrapper_attributes']['class'][] = 'grid__item';
        $form['deliver_information']['delivery_city']['#wrapper_attributes']['class'][] = 'one-half';
        $form['deliver_information']['delivery_country']['#wrapper_attributes']['class'][] = 'grid__item';
    }

    // Nodeshop checkout form
    if ('nodeshop_order_checkout_form' == $form_id) {
        if (isset($form['register'])) {
            $form['register']['#wrapper_attributes']['class'][] = 'block--white';
        }
        $form['customer_address']['#prefix'] = '<div class="grid grid--stretch"><div class="grid__item one-third">';
        $form['customer_address']['#suffix'] = '</div>';
        $form['customer_address']['#attributes']['class'][] = 'teaser';
        $form['delivery_address']['#prefix'] = '<div class="grid__item one-third">';
        $form['delivery_address']['#suffix'] = '</div>';
        $form['delivery_address']['#attributes']['class'][] = 'teaser';
        $form['payment_method']['#prefix'] = '<div class="grid__item one-third">';
        $form['payment_method']['#attributes']['class'][] = 'teaser';
        $form['payment_method']['#attributes']['class'][] = 'block--white';
        $form['payment_method']['#suffix'] = '</div></div>';
        $form['customer_information']['#wrapper_attributes']['class'][] = 'block--white';
    }

    // User register form
    if ('user_register_form' == $form_id) {

        $form['account']['#attributes']['class'][] = 'grid';
        $form['account']['mail']['#wrapper_attributes']['class'][] = 'grid__item';
        $form['account']['name']['#wrapper_attributes']['class'][] = 'grid__item';
        $form['account']['pass']['#wrapper_attributes']['class'][] = 'grid__item';


        $form['field_salutation']['#attributes']['class'][] = 'grid__item';
        $form['field_salutation']['#attributes']['class'][] = 'two-thirds';
        $form['field_salutation']['#prefix'] = '<div class="grid">';

        $form['field_first_name']['#attributes']['class'][] = 'grid__item';
        $form['field_first_name']['#attributes']['class'][] = 'one-half';
        $form['field_last_name']['#attributes']['class'][] = 'grid__item';
        $form['field_last_name']['#attributes']['class'][] = 'one-half';
        $form['field_street']['#attributes']['class'][] = 'grid__item';
        $form['field_street_addon']['#attributes']['class'][] = 'grid__item';
        $form['field_zip']['#attributes']['class'][] = 'grid__item';
        $form['field_zip']['#attributes']['class'][] = 'one-half';
        $form['field_city']['#attributes']['class'][] = 'grid__item';
        $form['field_city']['#attributes']['class'][] = 'one-half';
        $form['field_country']['#attributes']['class'][] = 'grid__item';
        $form['field_phone']['#attributes']['class'][] = 'grid__item';
        $form['field_woher']['#attributes']['class'][] = 'grid__item';
        $form['field_woher']['#prefix'] = '</div>';
    }

    // User edit form
    if ('user_form' == $form_id) {

      $form['account']['#attributes']['class'][] = 'grid';
      $form['account']['mail']['#wrapper_attributes']['class'][] = 'grid__item';
      $form['account']['name']['#wrapper_attributes']['class'][] = 'grid__item';
      $form['account']['pass']['#wrapper_attributes']['class'][] = 'grid__item';
      $form['account']['current_pass']['#wrapper_attributes']['class'][] = 'grid__item';


      $form['field_salutation']['#attributes']['class'][] = 'grid__item';
      $form['field_salutation']['#attributes']['class'][] = 'two-thirds';
      $form['field_salutation']['#prefix'] = '<div class="grid">';

      $form['field_first_name']['#attributes']['class'][] = 'grid__item';
      $form['field_first_name']['#attributes']['class'][] = 'one-half';
      $form['field_last_name']['#attributes']['class'][] = 'grid__item';
      $form['field_last_name']['#attributes']['class'][] = 'one-half';
      $form['field_street']['#attributes']['class'][] = 'grid__item';
      $form['field_street_addon']['#attributes']['class'][] = 'grid__item';
      $form['field_zip']['#attributes']['class'][] = 'grid__item';
      $form['field_zip']['#attributes']['class'][] = 'one-half';
      $form['field_city']['#attributes']['class'][] = 'grid__item';
      $form['field_city']['#attributes']['class'][] = 'one-half';
      $form['field_country']['#attributes']['class'][] = 'grid__item';
      $form['field_phone']['#attributes']['class'][] = 'grid__item';
      $form['field_woher']['#attributes']['class'][] = 'grid__item';
      $form['field_woher']['#suffix'] = '</div>';

      $form['field_kindle_email']['#prefix'] = '<div class="grid">';
      $form['field_kindle_email']['#attributes']['class'][] = 'grid__item';
      $form['field_kindle_email']['#attributes']['class'][] = 'two-thirds';
      $form['field_kindle_domain']['#attributes']['class'][] = 'grid__item';
      $form['field_kindle_domain']['#attributes']['class'][] = 'one-third';
      $form['field_kindle_domain']['#suffix'] = '</div>';
  }

    // Contact form
    if ('contact_message_feedback_form' == $form_id) {
        // Submit
        $form['actions']['preview']['#attributes']['class'][] = 'button--reversed';
        $form['actions']['preview']['#weight'] = -10;
    }

    // Search form alter
    if ('search_form' == $form_id) {
        $form['basic']['keys']['#placeholder'] = t('Search this website...');
    }
}

function _palm_get_issue($node) {
    if ($node && !empty($node->book) && $node->id !== $node->book['bid']) {
        $book = \Drupal::entityTypeManager()->getStorage('node')->load($node->book['bid']);
        if ($book && $book->hasField('field_ausgabe') && $book->hasField('field_jahr')) {
            // get the edition
            $edition = $book->get('field_ausgabe')->entity->getName();
            $year = $book->get('field_jahr')->entity->getName();
        }
        return [
            'nid' => $book->id(),
            'year' => $year,
            'edition' => $edition,
        ];
    }

    return [];

}

/**
 * This method helps to debug the deeply nested drupal arrays.
 *
 * @param mixed $data       The data to be logged
 * @param boolean $keysonly Falg to display keys of the given data only
 *
 * @return void
 */
function palm_debug($data, $keysonly = false)
{
  if ($keysonly) {
    $data = array_keys($data);
  }
  error_log(print_r($data,1));
}
