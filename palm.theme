<?php

use Drupal\block\Entity\Block;
use Drupal\Core\Render\Markup;
use Drupal\taxonomy\Entity\Term;

/**
 * Implements hook template_prepocess_page_title
 *
 * We use this to add a class to the page title, depending on the type of page
 * that is displayed. Currently we set:
 *
 *  - heading--article on all nodes
 *  - heading--pagecategory on all cart routes and for users
 *
 * @param array $variables The Drupal render array that goes into the template
 *
 * @return void
 */
function palm_preprocess_page_title(&$variables)
{

  $custom_headline_class = 'heading--pagecategory';

  // Title overrides for nodes goes here:
  if ($node = \Drupal::request()->attributes->get('node')) {
    if ('ausgabe' == $node->getType()) {
      $variables['title_prefix'] = t('Edition');
      $variables['title_attributes']['class'][] = $custom_headline_class;
    } else {
      $variables['title_attributes']['class'][] = 'heading--article';
    }
  }
  // Title overrides for taxonomies or vocabularies goes here:
  if (\Drupal::routeMatch()->getRouteName() == 'entity.taxonomy_term.canonical') {
    $term = Term::load(\Drupal::routeMatch()->getRawParameter('taxonomy_term'));
    if ('themen' == $term->bundle()) {
      $variables['title_prefix'] = t('Topic');
      $variables['title_attributes']['class'][] = $custom_headline_class;
    }
  }
  // We define routes, where we need a special class for the title
  $routes = [
    //'entity.taxonomy_term.canonical',
    'entity.user.cancel_form',
    'entity.user.canonical',
    'entity.user.canonical',
    'entity.user.contact_form',
    'entity.user.edit_form',
    'nodeshop.finishedOrder',
    'nodeshop.processOrder',
    'nodeshop.showCart',
    'nodeshop.addBonus',
    'nodeshop.changeBonus',
    'nodeshop.removeBonus',
    'user.login',
    'user.page',
    'user.password',
    'user.register',
    'user.reset.form',
    'user.reset.login',
    'user.reset',
    'view.nodeshop_user_orders.page_1',
    'view.nodeshop_user_orders.page_2',
  ];
  if (in_array(\Drupal::request()->get('_route'), $routes)) {
    $variables['title_attributes']['class'][] = $custom_headline_class;
  }
}

/**
 * Implements hook template_preprocess_field__node__body
 *
 * We use this to add an extra class to the first paragraph of the body field as we want to have an initial there for
 * every configured node type.
 * In order to do so, we need to recreate the complete markup for the body field.
 * We only want to do that on the full node view_mode
 *
 * @param array $variables The Drupal render array that goes into the template
 *
 * @return void
 */
function palm_preprocess_field__node__body(&$variables)
{
  if ('full' == $variables['element']['#view_mode']) {
    $palm_initial_nodetypes = theme_get_setting('palm_initial_nodetypes');
    if (!empty($palm_initial_nodetypes) && in_array($variables['element']['#bundle'], $palm_initial_nodetypes)) {
      $original_body = preg_replace(
        '/<p>/i',
        '<p class="initiale">',
        $variables['items'][0]['content']['#text'],
        1
      );
      $variables['items'][0]['content'] = Markup::create($original_body);
    }
  }
}

/**
 * Implementation of hook_theme_suggestions_page_alter
 *
 * @param array $suggestions
 * @param array $vars
 * @return void
 */
function palm_theme_suggestions_page_alter(&$suggestions, &$vars) {

  // create suggestions based on the taxonomy
  if (\Drupal::routeMatch()->getRouteName() == 'entity.taxonomy_term.canonical'
    && $tid = \Drupal::routeMatch()->getRawParameter('taxonomy_term')
  ) {
      $term = Term::load($tid);
      $suggestions[] = 'page__taxonomy';
      $suggestions[] = 'page__taxonomy__' . $term->getVocabularyId();
  }

  // create suggestions based on the content type
  if ($node = \Drupal::routeMatch()->getParameter('node')) {
      $content_type = $node->bundle();
      $suggestions[] = 'page__' . $content_type;
  }

  // create suggestions for users
  if ($node = \Drupal::routeMatch()->getParameter('user')) {
      $suggestions[] = 'page__user';
  }

  // create suggestions based on the view_id
  $view_id = \Drupal::routeMatch()->getParameter('view_id');
  if (! empty($view_id)) {
    $suggestions[] = 'page__' . $view_id;
  }
}

/**
 * Implementation of hook_theme_suggestions_block_alter
 *
 * We use this to implement template suggestions based on the region of the page.
 *
 * @see https://www.drupal.org/node/2011434
 *
 * @param array $suggestions The referenced suggestions array
 * @param array $variables   The variables that are coming along with the suggestsions
 */
function palm_theme_suggestions_block_alter(array &$suggestions, array $variables)
{
  if (!empty($variables['elements']['#id'])) {
    $block = Block::load($variables['elements']['#id']);
    $suggestions[] = 'block__' . $block->getRegion();
    $suggestions[] = 'block__' . $block->getRegion() . '__' . $variables['elements']['#id'];
  }
  return $suggestions;
}

/**
 * Implementation of hook_theme_suggestions_field_alter
 *
 * We use this to implement template suggestions based on the display mode of the field.
 *
 * @see https://www.drupal.org/project/zurb_foundation/issues/2962578
 *
 * @param array $suggestions The referenced suggestions array
 * @param array $variables   The variables that are coming along with the suggestsions
 */
function palm_theme_suggestions_field_alter(array &$suggestions, array $variables) {
  $suggestion = 'field__' .
    $variables['element']['#entity_type'] . '__' .
    $variables['element']['#field_name'] . '__' .
    $variables['element']['#view_mode'];
  $suggestions[] = $suggestion;
  return $suggestions;
}

function palm_theme_suggestions_taxonomy_term_alter(&$suggestions, $vars, $hook) {
  $suggestions[] = 'taxonomy_term__' . $vars['elements']['#view_mode'];
}

/**
 * Implememntation of hook_preprocess_page
 *
 * @param array $variables
 * @return void
 */
function palm_preprocess_page(&$variables) {

  // check for taxonomy pages
  if (\Drupal::routeMatch()->getRouteName() == 'entity.taxonomy_term.canonical'
    && $term = Term::load(\Drupal::routeMatch()->getRawParameter('taxonomy_term'))
  ) {
      // special header for themen
      if ('autoren' == $term->bundle()) {
        $variables['page']['hero']['category_title'] = [
          '#type' => 'markup',
          '#markup' => '<div class="heading--pagecategory"><a href="/autoren" class="back">Autorinnen und Autoren</a></div>',
        ];
      }
  }
  if ($node = \Drupal::request()->attributes->get('node')) {
    if ('dossier' == $node->getType()) {
      $dossier = '';
      if ($node->hasField('field_dossier')) {
        $dossier = $node->field_dossier->entity->getName();
      }
      $variables['page']['hero']['category_title'] = [
        '#type' => 'markup',
        '#markup' => sprintf(
          '<div class="heading--pagecategory"><span class="text--red">%s</span> %s</div>',
          'Dossier',
          $dossier
        ),
      ];
    }
  }
}

/**
 * Implementation of template_preprocess_node
 *
 * @param array $variables The reference to the variable array
 * @return void
 */
function palm_preprocess_node(&$variables)
{
    if ('teaser_dossier' == $variables['elements']['#view_mode']) {
        $variables['dossier_articles'] = [
            '#type' => 'view',
            '#name' => 'blaetter_dossiers',
            '#display_id' => 'block_1',
            '#arguments' => [
                $variables['node']->field_dossier->target_id,
            ],
        ];
    }
}

/**
 * This method helps to debug the deeply nested drupal arrays.
 *
 * @param mixed $data       The data to be logged
 * @param boolean $keysonly Falg to display keys of the given data only
 *
 * @return void
 */
function palm_debug($data, $keysonly = false)
{
  if ($keysonly) {
    $data = array_keys($data);
  }
  error_log(print_r($data,1));
}
